openapi: 3.0.1
info:
  title: player-crud
  description: 'проект - это проект для работы с сущностью player'
  license:
    name: MIT open source license
  version: 0.0.1
servers:
  - url: https://localhost/
tags:
  - name: player-crud
    description: CRUDS для player
  - name: player
    description: создание, обновление, чтение, удаление и поиск игроков мафии
paths:
  /player/all:
    post:
      tags:
        - player
      summary: получить всех игроков
      operationId: getAllPlayeers
      requestBody:
        description: Объект запроса для получения всех игроков
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlayerRequest'
        required: true
      responses:
        200:
          description: all responses
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/BaseResponse'

  /player/create:
    post:
      tags:
        - player
      summary: создать юнита
      operationId: createPLayer
      requestBody:
        description: Объект запроса для создания юнита
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlayerRequest'
        required: true
      responses:
        200:
          description: all responses
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/BaseResponse'

  /player/read:
    post:
      tags:
        - player
      summary: Получить информацию о юните
      operationId: readPlayer
      requestBody:
        description: Объект запроса для получения информации о юните
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPlayerRequest'
        required: true
      responses:
        200:
          description: all responses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPlayerResponse'
  /player:
    post:
      tags:
        - player
      summary: Обновить юнита
      operationId: updatePlayer
      requestBody:
        description: Объект запроса для обновления игрока
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlayerRequest'
        required: true
      responses:
        200:
          description: all responses
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/BaseResponse'
    patch:
      tags:
        - player
      summary: Обновить массив юнитов
      operationId: updatePlayerArray
      requestBody:
        description: Объект запроса для обновления массива игроков
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlayerArrayRequest'
        required: true
      responses:
        200:
          description: all responses
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/BaseResponse'

  /player/delete:
    post:
      tags:
        - player
      summary: Удалить юнита
      operationId: deletePlayer
      requestBody:
        description: Объект запроса для удаления юнита
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePlayerRequest'
        required: true
      responses:
        200:
          description: all responses
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/BaseResponse'
  /player/search:
    post:
      tags:
        - player
      summary: Поиск юнитов
      operationId: searchAd
      requestBody:
        description: Объект запроса для поиска юнитов
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchPlayerRequest'
        required: true
      responses:
        200:
          description: all responses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPlayerResponse'

  /player/like/{nick}:
    get:
      tags:
        - user
      summary: прочиатать информацию о юнитах удовлетворяющих условию
      operationId: readUsersLike
      parameters:
        - in: path
          name: nick
          schema:
            type: string
          required: true
          description: Numeric ID of the user to get
      responses:
        200:
          description: all responses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAllPlayersResponse'
components:
  schemas:
    ReadAllPlayersRequest:
      description: Структура для создания юнита в репоизтории
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseRequest'
        - $ref: 'common.yaml#/components/schemas/BasePaginatedRequest'
    CreatePlayerRequest:
      description: Структура для создания юнита в репоизтории
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseRequest'
        - $ref: '#/components/schemas/PlayerMetaInfo'



    ReadPlayerRequest:
      description: Структура для получения юнита
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseRequest'
        - type: object
          required:
            - messageUUID
          properties:
            playerUuid:
              type: string
              format: uuid
            debug:
              allOf:
                - $ref: 'common.yaml#/components/schemas/BaseDebugRequest'
                - type: object
                  properties:
                    stub:
                      type: string
                      enum:
                        - success
                        - emptyId
                        - databaseError
    ReadPlayerResponse:
      description: Структура для ответа на запрос с информацией о юните
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseResponse'
        - $ref: '#/components/schemas/PlayerMetaInfo'

    ReadAllPlayersResponse:
      description: Структура для ответа на запрос с информацией о юните
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseResponse'
        - type: object
          properties:
            totalPages:
              type: integer
            pageNumber:
              type: integer
            totalElements:
              type: integer
              format: int64
        - type: object
          properties:
            players:
              type: array
              items:
                $ref: '#/components/schemas/PlayerMetaInfo'

    UpdatePlayerRequest:
      description: Структура для запроса обновления существующего юнита
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseRequest'
        - $ref: '#/components/schemas/PlayerMetaInfo'

    UpdatePlayerArrayRequest:
      description: Структура для запроса обновления существующего юнита
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseRequest'
        - type: object
          properties:
            players:
              type: array
              items:
                $ref: '#/components/schemas/UpdatePlayerRequest'

    UpdatePlayerResponse:
      description: Структура для ответа на запрос с информацией о юните
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseResponse'


    DeletePlayerRequest:
      description: Структура для запроса удаления юнита
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseRequest'
        - type: object
          properties:
            playerUuid:
              type: string
              format: uuid
            debug:
              allOf:
                - $ref: 'common.yaml#/components/schemas/BaseDebugRequest'
                - type: object
                  properties:
                    stub:
                      type: string
                      enum:
                        - success
                        - emptyId
                        - databaseError



    DeletePlayerResponse:
      description: Структура для ответа на запрос об удалении юнита
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseResponse'
        - type: object
          properties:
            payload:
              type: string

    SearchPlayerRequest:
      description: Структура для запроса поиска юнитов
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseRequest'
        - type: object
          properties:
            nickName:
              type: string
        - $ref: 'common.yaml#/components/schemas/BasePaginatedRequest'

    PlayerMetaInfo:
      description: мета-инфомация для юнита
      allOf:
        - $ref: '#/components/schemas/GamePlayerInfo'
        - type: object
          properties:
            ratingId:
              description: Порядковый номер в рейтинге
              type: integer
              format: int64
            victoriesPercent:
              description: процент побед
              type: integer
              format: int64
            victories:
              description: количестdо побед
              type: integer
              format: int64
            victoriesRedPercent:
              description: процент побед за красных
              type: integer
              format: int64
            victoriesBlackPercent:
              description: процент побед за черных
              type: integer
              format: int64
            image:
              type: string
            games:
              description: игр всего сыграно
              type: integer
              format: int64
            rating:
              description: Итоговый рейтинг (процент побед умножить на сумму баллов)
              type: number
            status:
              description: играет или свободен?
              type: string
            created:
              description: когда создан?
              type: string
              format: date-time
            updated:
              description: когда был обновлен?
              type: string
              format: date-time
    NightInfo:
      description: мета-инфомация для ночи
      type: object
      properties:
        nightNumber:
          type: integer
        killedPlayer:
          type: string
          format: uuid
        sheriffChecked:
          type: string
          format: uuid
        donChecked:
          type: string
          format: uuid
        playerLeftGame:
          type: string
          format: uuid

    PlayerToCardNumber:
      description: мета-инфомация для обозначения к какой карте игрок принадлежит
      type: object
      properties:
        playerUuid:
          type: string
          format: uuid
        cardNumber:
          type: integer

    GamePlayerInfo:
      description: мета-инфомация для юнита, которая не используется в статистике
      type: object
      properties:
        playerUuid:
          description: идентификатор юнита
          type: string
          format: uuid
        nickName:
          description: имя юнита
          type: string
        foulAmount:
          description: количество фолов
          type: integer
          format: int64
        points:
          description: Сумма баллов
          type: integer
          format: int64
        additionalPoints:
          description: additionalPoints
          type: number
        penalties:
          description: Штрафные баллы (сумма)
          type: integer
          format: int64
        bestMove:
          description: Лучший ход я(сумма)
          type: integer
          format: int64
        victoriesRed:
          description: количество побед за красных
          type: integer
          format: int64
        victoriesBlack:
          description: победы за черных
          type: integer
          format: int64
        defeatBlack:
          description: поражения за черных
          type: integer
          format: int64
        defeatRed:
          description: поражения за красных
          type: integer
          format: int64
        don:
          description: количесвто побед за дона
          type: integer
          format: int64
        sheriff:
          description: количество побед за шерифа
          type: integer
          format: int64
        wasKilled:
          description: количесвто отстрелов в первую ночь
          type: integer
          format: int64


    SearchPlayerResponse:
      description: Структура для ответа на запрос поиска юнитов
      allOf:
        - $ref: 'common.yaml#/components/schemas/BaseMessage'
        - $ref: 'common.yaml#/components/schemas/BaseResponse'
        - type: object
          properties:
            page:
              $ref: 'common.yaml#/components/schemas/BasePaginatedResponse'
            foundMessages:
              type: array
              items:
                $ref: 'common.yaml#/components/schemas/ResponseMessage'


